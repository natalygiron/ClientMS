/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.ClientResponse;
import org.openapitools.model.CreateClientRequest;
import org.openapitools.model.PatchClientRequest;
import org.openapitools.model.UpdateClientRequest;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.lang.Nullable;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-09-06T01:31:22.024683600-05:00[America/Lima]", comments = "Generator version: 7.14.0")
@Validated
@Tag(name = "Client", description = "Customer-related operations")
public interface ClientesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /clientes : Listar todos los clientes
     *
     * @return List of clients (status code 200)
     */
    @Operation(
        operationId = "clientesGet",
        summary = "Listar todos los clientes",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of clients", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ClientResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clientes",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<ClientResponse>> clientesGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : 0, \"dni\" : \"dni\", \"email\" : \"email\" }, { \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : 0, \"dni\" : \"dni\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /clientes/{id} : Eliminar cliente por ID
     *
     * @param id  (required)
     * @return Client deleted (status code 204)
     *         or Client not found (status code 404)
     */
    @Operation(
        operationId = "clientesIdDelete",
        summary = "Eliminar cliente por ID",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Client deleted"),
            @ApiResponse(responseCode = "404", description = "Client not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/clientes/{id}"
    )
    
    default ResponseEntity<Void> clientesIdDelete(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /clientes/{id} : Obtener cliente por ID
     *
     * @param id  (required)
     * @return Client found (status code 200)
     *         or Client not found (status code 404)
     */
    @Operation(
        operationId = "clientesIdGet",
        summary = "Obtener cliente por ID",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Client found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Client not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/clientes/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<ClientResponse> clientesIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : 0, \"dni\" : \"dni\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /clientes/{id} : Actualizar parcialmente cliente por ID
     *
     * @param id  (required)
     * @param patchClientRequest  (required)
     * @return Client successfully patched (status code 200)
     *         or Client not found (status code 404)
     */
    @Operation(
        operationId = "clientesIdPatch",
        summary = "Actualizar parcialmente cliente por ID",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Client successfully patched", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientResponse.class))
            }),
            @ApiResponse(responseCode = "404", description = "Client not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/clientes/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ClientResponse> clientesIdPatch(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "PatchClientRequest", description = "", required = true) @Valid @RequestBody PatchClientRequest patchClientRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : 0, \"dni\" : \"dni\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /clientes/{id} : Actualizar cliente por ID
     *
     * @param id  (required)
     * @param updateClientRequest  (required)
     * @return Client successfully updated (status code 200)
     *         or Invalid data (status code 400)
     *         or Client not found (status code 404)
     *         or Email already in use (status code 409)
     */
    @Operation(
        operationId = "clientesIdPut",
        summary = "Actualizar cliente por ID",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Client successfully updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid data"),
            @ApiResponse(responseCode = "404", description = "Client not found"),
            @ApiResponse(responseCode = "409", description = "Email already in use")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/clientes/{id}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ClientResponse> clientesIdPut(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "UpdateClientRequest", description = "", required = true) @Valid @RequestBody UpdateClientRequest updateClientRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : 0, \"dni\" : \"dni\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /clientes : Registrar nuevo cliente
     *
     * @param createClientRequest  (required)
     * @return Customer successfully created (status code 200)
     *         or Invalid data (status code 400)
     *         or Internal server error (status code 500)
     */
    @Operation(
        operationId = "clientesPost",
        summary = "Registrar nuevo cliente",
        tags = { "Client" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Customer successfully created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ClientResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid data"),
            @ApiResponse(responseCode = "500", description = "Internal server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/clientes",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<ClientResponse> clientesPost(
        @Parameter(name = "CreateClientRequest", description = "", required = true) @Valid @RequestBody CreateClientRequest createClientRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"firstName\" : \"firstName\", \"lastName\" : \"lastName\", \"id\" : 0, \"dni\" : \"dni\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
